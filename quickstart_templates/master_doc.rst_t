.. {{ project }} documentation master file, created by
   sphinx-quickstart on {{ now }}.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to {{ project }}'s documentation!
==========={{ project_underline }}=================

.. toctree::
   :maxdepth: {{ mastertocmaxdepth }}
   :caption: Contents:

{{ mastertoctree }}

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

Example of a PlantUML Diagram
-----------------------------

.. uml::

  @startuml
  participant Last order 30
  participant Middle order 20
  participant First order 10
  @enduml

Example of a C4 Model Diagram
-----------------------------
You can include `C4_Context`, `C4_Container`, `C4_Component`
from `C4-PlantUML <https://github.com/RicardoNiepel/C4-PlantUML>`_

This example was copied from `here <https://github.com/RicardoNiepel/C4-PlantUML/blob/master/samples/C4_Container%20Diagram%20Sample%20-%20bigbankplc.puml>`_.

.. uml::

  @startuml
  !includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml
  ' uncomment the following line and comment the first to use locally
  ' !include /usr/share/plantuml/C4_Container.puml

  LAYOUT_TOP_DOWN
  'LAYOUT_AS_SKETCH
  LAYOUT_WITH_LEGEND

  title Container diagram for Internet Banking System

  Person(customer, Customer, "A customer of the bank, with personal bank accounts")

  System_Boundary(c1, "Internet Banking") {
      Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and the Internet banking SPA")
      Container(spa, "Single-Page App", "JavaScript, Angular", "Provides all the Internet banking functionality to cutomers via their web browser")
      Container(mobile_app, "Mobile App", "C#, Xamarin", "Provides a limited subset of the Internet banking functionality to customers via their mobile device")
      Container(database, "Database", "SQL Database", "Stores user registraion information, hased auth credentials, access logs, etc.")
      Container(backend_api, "API Application", "Java, Docker Container", "Provides Internet banking functionality via API")
  }

  System_Ext(email_system, "E-Mail System", "The internal Microsoft Exchange system")
  System_Ext(banking_system, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

  Rel(customer, web_app, "Uses", "HTTPS")
  Rel(customer, spa, "Uses", "HTTPS")
  Rel(customer, mobile_app, "Uses")

  Rel_Neighbor(web_app, spa, "Delivers")
  Rel(spa, backend_api, "Uses", "async, JSON/HTTPS")
  Rel(mobile_app, backend_api, "Uses", "async, JSON/HTTPS")
  Rel_Back_Neighbor(database, backend_api, "Reads from and writes to", "sync, JDBC")

  Rel_Back(customer, email_system, "Sends e-mails to")
  Rel_Back(email_system, backend_api, "Sends e-mails using", "sync, SMTP")
  Rel_Neighbor(backend_api, banking_system, "Uses", "sync/async, XML/HTTPS")
  @enduml